// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: redtangle.proto
#ifndef GRPC_redtangle_2eproto__INCLUDED
#define GRPC_redtangle_2eproto__INCLUDED

#include "redtangle.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace redtangle_grpc {

class Redtangle final {
 public:
  static constexpr char const* service_full_name() {
    return "redtangle_grpc.Redtangle";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Connect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::redtangle_grpc::ConnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::ConnectResponse>> AsyncConnect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::ConnectResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::ConnectResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::ConnectResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    virtual ::grpc::Status Select(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::redtangle_grpc::SelectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::SelectResponse>> AsyncSelect(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::SelectResponse>>(AsyncSelectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::SelectResponse>> PrepareAsyncSelect(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::SelectResponse>>(PrepareAsyncSelectRaw(context, request, cq));
    }
    virtual ::grpc::Status Rotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::redtangle_grpc::RotateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::RotateResponse>> AsyncRotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::RotateResponse>>(AsyncRotateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::RotateResponse>> PrepareAsyncRotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::RotateResponse>>(PrepareAsyncRotateRaw(context, request, cq));
    }
    virtual ::grpc::Status EndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::redtangle_grpc::EndTurnResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::EndTurnResponse>> AsyncEndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::EndTurnResponse>>(AsyncEndTurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::EndTurnResponse>> PrepareAsyncEndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::EndTurnResponse>>(PrepareAsyncEndTurnRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::redtangle_grpc::GetStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status Disconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::redtangle_grpc::DisconnectResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::DisconnectResponse>> AsyncDisconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::DisconnectResponse>>(AsyncDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::DisconnectResponse>> PrepareAsyncDisconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::DisconnectResponse>>(PrepareAsyncDisconnectRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Connect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest* request, ::redtangle_grpc::ConnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Connect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest* request, ::redtangle_grpc::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Select(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest* request, ::redtangle_grpc::SelectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Select(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest* request, ::redtangle_grpc::SelectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Rotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest* request, ::redtangle_grpc::RotateResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Rotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest* request, ::redtangle_grpc::RotateResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest* request, ::redtangle_grpc::EndTurnResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest* request, ::redtangle_grpc::EndTurnResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest* request, ::redtangle_grpc::GetStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest* request, ::redtangle_grpc::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Disconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest* request, ::redtangle_grpc::DisconnectResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Disconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest* request, ::redtangle_grpc::DisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::ConnectResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::ConnectResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::SelectResponse>* AsyncSelectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::SelectResponse>* PrepareAsyncSelectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::RotateResponse>* AsyncRotateRaw(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::RotateResponse>* PrepareAsyncRotateRaw(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::EndTurnResponse>* AsyncEndTurnRaw(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::EndTurnResponse>* PrepareAsyncEndTurnRaw(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::DisconnectResponse>* AsyncDisconnectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::redtangle_grpc::DisconnectResponse>* PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Connect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::redtangle_grpc::ConnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::ConnectResponse>> AsyncConnect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::ConnectResponse>>(AsyncConnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::ConnectResponse>> PrepareAsyncConnect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::ConnectResponse>>(PrepareAsyncConnectRaw(context, request, cq));
    }
    ::grpc::Status Select(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::redtangle_grpc::SelectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::SelectResponse>> AsyncSelect(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::SelectResponse>>(AsyncSelectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::SelectResponse>> PrepareAsyncSelect(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::SelectResponse>>(PrepareAsyncSelectRaw(context, request, cq));
    }
    ::grpc::Status Rotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::redtangle_grpc::RotateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::RotateResponse>> AsyncRotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::RotateResponse>>(AsyncRotateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::RotateResponse>> PrepareAsyncRotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::RotateResponse>>(PrepareAsyncRotateRaw(context, request, cq));
    }
    ::grpc::Status EndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::redtangle_grpc::EndTurnResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::EndTurnResponse>> AsyncEndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::EndTurnResponse>>(AsyncEndTurnRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::EndTurnResponse>> PrepareAsyncEndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::EndTurnResponse>>(PrepareAsyncEndTurnRaw(context, request, cq));
    }
    ::grpc::Status GetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::redtangle_grpc::GetStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::GetStatusResponse>> AsyncGetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::GetStatusResponse>>(AsyncGetStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::GetStatusResponse>> PrepareAsyncGetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::GetStatusResponse>>(PrepareAsyncGetStatusRaw(context, request, cq));
    }
    ::grpc::Status Disconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::redtangle_grpc::DisconnectResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::DisconnectResponse>> AsyncDisconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::DisconnectResponse>>(AsyncDisconnectRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::DisconnectResponse>> PrepareAsyncDisconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::DisconnectResponse>>(PrepareAsyncDisconnectRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Connect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest* request, ::redtangle_grpc::ConnectResponse* response, std::function<void(::grpc::Status)>) override;
      void Connect(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest* request, ::redtangle_grpc::ConnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Select(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest* request, ::redtangle_grpc::SelectResponse* response, std::function<void(::grpc::Status)>) override;
      void Select(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest* request, ::redtangle_grpc::SelectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Rotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest* request, ::redtangle_grpc::RotateResponse* response, std::function<void(::grpc::Status)>) override;
      void Rotate(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest* request, ::redtangle_grpc::RotateResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest* request, ::redtangle_grpc::EndTurnResponse* response, std::function<void(::grpc::Status)>) override;
      void EndTurn(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest* request, ::redtangle_grpc::EndTurnResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest* request, ::redtangle_grpc::GetStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStatus(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest* request, ::redtangle_grpc::GetStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Disconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest* request, ::redtangle_grpc::DisconnectResponse* response, std::function<void(::grpc::Status)>) override;
      void Disconnect(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest* request, ::redtangle_grpc::DisconnectResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::ConnectResponse>* AsyncConnectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::ConnectResponse>* PrepareAsyncConnectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::ConnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::SelectResponse>* AsyncSelectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::SelectResponse>* PrepareAsyncSelectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::SelectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::RotateResponse>* AsyncRotateRaw(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::RotateResponse>* PrepareAsyncRotateRaw(::grpc::ClientContext* context, const ::redtangle_grpc::RotateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::EndTurnResponse>* AsyncEndTurnRaw(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::EndTurnResponse>* PrepareAsyncEndTurnRaw(::grpc::ClientContext* context, const ::redtangle_grpc::EndTurnRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::GetStatusResponse>* AsyncGetStatusRaw(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::GetStatusResponse>* PrepareAsyncGetStatusRaw(::grpc::ClientContext* context, const ::redtangle_grpc::GetStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::DisconnectResponse>* AsyncDisconnectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::redtangle_grpc::DisconnectResponse>* PrepareAsyncDisconnectRaw(::grpc::ClientContext* context, const ::redtangle_grpc::DisconnectRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Connect_;
    const ::grpc::internal::RpcMethod rpcmethod_Select_;
    const ::grpc::internal::RpcMethod rpcmethod_Rotate_;
    const ::grpc::internal::RpcMethod rpcmethod_EndTurn_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_Disconnect_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Connect(::grpc::ServerContext* context, const ::redtangle_grpc::ConnectRequest* request, ::redtangle_grpc::ConnectResponse* response);
    virtual ::grpc::Status Select(::grpc::ServerContext* context, const ::redtangle_grpc::SelectRequest* request, ::redtangle_grpc::SelectResponse* response);
    virtual ::grpc::Status Rotate(::grpc::ServerContext* context, const ::redtangle_grpc::RotateRequest* request, ::redtangle_grpc::RotateResponse* response);
    virtual ::grpc::Status EndTurn(::grpc::ServerContext* context, const ::redtangle_grpc::EndTurnRequest* request, ::redtangle_grpc::EndTurnResponse* response);
    virtual ::grpc::Status GetStatus(::grpc::ServerContext* context, const ::redtangle_grpc::GetStatusRequest* request, ::redtangle_grpc::GetStatusResponse* response);
    virtual ::grpc::Status Disconnect(::grpc::ServerContext* context, const ::redtangle_grpc::DisconnectRequest* request, ::redtangle_grpc::DisconnectResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Connect() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::ConnectRequest* /*request*/, ::redtangle_grpc::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::redtangle_grpc::ConnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::redtangle_grpc::ConnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Select() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::SelectRequest* /*request*/, ::redtangle_grpc::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelect(::grpc::ServerContext* context, ::redtangle_grpc::SelectRequest* request, ::grpc::ServerAsyncResponseWriter< ::redtangle_grpc::SelectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Rotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Rotate() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Rotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rotate(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::RotateRequest* /*request*/, ::redtangle_grpc::RotateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRotate(::grpc::ServerContext* context, ::redtangle_grpc::RotateRequest* request, ::grpc::ServerAsyncResponseWriter< ::redtangle_grpc::RotateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EndTurn() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::EndTurnRequest* /*request*/, ::redtangle_grpc::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndTurn(::grpc::ServerContext* context, ::redtangle_grpc::EndTurnRequest* request, ::grpc::ServerAsyncResponseWriter< ::redtangle_grpc::EndTurnResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::GetStatusRequest* /*request*/, ::redtangle_grpc::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::redtangle_grpc::GetStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::redtangle_grpc::GetStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Disconnect() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::DisconnectRequest* /*request*/, ::redtangle_grpc::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnect(::grpc::ServerContext* context, ::redtangle_grpc::DisconnectRequest* request, ::grpc::ServerAsyncResponseWriter< ::redtangle_grpc::DisconnectResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Connect<WithAsyncMethod_Select<WithAsyncMethod_Rotate<WithAsyncMethod_EndTurn<WithAsyncMethod_GetStatus<WithAsyncMethod_Disconnect<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Connect() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::ConnectRequest, ::redtangle_grpc::ConnectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::redtangle_grpc::ConnectRequest* request, ::redtangle_grpc::ConnectResponse* response) { return this->Connect(context, request, response); }));}
    void SetMessageAllocatorFor_Connect(
        ::grpc::MessageAllocator< ::redtangle_grpc::ConnectRequest, ::redtangle_grpc::ConnectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::ConnectRequest, ::redtangle_grpc::ConnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::ConnectRequest* /*request*/, ::redtangle_grpc::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Connect(
      ::grpc::CallbackServerContext* /*context*/, const ::redtangle_grpc::ConnectRequest* /*request*/, ::redtangle_grpc::ConnectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Select() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::SelectRequest, ::redtangle_grpc::SelectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::redtangle_grpc::SelectRequest* request, ::redtangle_grpc::SelectResponse* response) { return this->Select(context, request, response); }));}
    void SetMessageAllocatorFor_Select(
        ::grpc::MessageAllocator< ::redtangle_grpc::SelectRequest, ::redtangle_grpc::SelectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::SelectRequest, ::redtangle_grpc::SelectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::SelectRequest* /*request*/, ::redtangle_grpc::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Select(
      ::grpc::CallbackServerContext* /*context*/, const ::redtangle_grpc::SelectRequest* /*request*/, ::redtangle_grpc::SelectResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Rotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Rotate() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::RotateRequest, ::redtangle_grpc::RotateResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::redtangle_grpc::RotateRequest* request, ::redtangle_grpc::RotateResponse* response) { return this->Rotate(context, request, response); }));}
    void SetMessageAllocatorFor_Rotate(
        ::grpc::MessageAllocator< ::redtangle_grpc::RotateRequest, ::redtangle_grpc::RotateResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::RotateRequest, ::redtangle_grpc::RotateResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Rotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rotate(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::RotateRequest* /*request*/, ::redtangle_grpc::RotateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rotate(
      ::grpc::CallbackServerContext* /*context*/, const ::redtangle_grpc::RotateRequest* /*request*/, ::redtangle_grpc::RotateResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EndTurn() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::EndTurnRequest, ::redtangle_grpc::EndTurnResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::redtangle_grpc::EndTurnRequest* request, ::redtangle_grpc::EndTurnResponse* response) { return this->EndTurn(context, request, response); }));}
    void SetMessageAllocatorFor_EndTurn(
        ::grpc::MessageAllocator< ::redtangle_grpc::EndTurnRequest, ::redtangle_grpc::EndTurnResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::EndTurnRequest, ::redtangle_grpc::EndTurnResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::EndTurnRequest* /*request*/, ::redtangle_grpc::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndTurn(
      ::grpc::CallbackServerContext* /*context*/, const ::redtangle_grpc::EndTurnRequest* /*request*/, ::redtangle_grpc::EndTurnResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStatus() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::GetStatusRequest, ::redtangle_grpc::GetStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::redtangle_grpc::GetStatusRequest* request, ::redtangle_grpc::GetStatusResponse* response) { return this->GetStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetStatus(
        ::grpc::MessageAllocator< ::redtangle_grpc::GetStatusRequest, ::redtangle_grpc::GetStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::GetStatusRequest, ::redtangle_grpc::GetStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::GetStatusRequest* /*request*/, ::redtangle_grpc::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::redtangle_grpc::GetStatusRequest* /*request*/, ::redtangle_grpc::GetStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Disconnect() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::DisconnectRequest, ::redtangle_grpc::DisconnectResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::redtangle_grpc::DisconnectRequest* request, ::redtangle_grpc::DisconnectResponse* response) { return this->Disconnect(context, request, response); }));}
    void SetMessageAllocatorFor_Disconnect(
        ::grpc::MessageAllocator< ::redtangle_grpc::DisconnectRequest, ::redtangle_grpc::DisconnectResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::redtangle_grpc::DisconnectRequest, ::redtangle_grpc::DisconnectResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::DisconnectRequest* /*request*/, ::redtangle_grpc::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Disconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::redtangle_grpc::DisconnectRequest* /*request*/, ::redtangle_grpc::DisconnectResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Connect<WithCallbackMethod_Select<WithCallbackMethod_Rotate<WithCallbackMethod_EndTurn<WithCallbackMethod_GetStatus<WithCallbackMethod_Disconnect<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Connect() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::ConnectRequest* /*request*/, ::redtangle_grpc::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Select() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::SelectRequest* /*request*/, ::redtangle_grpc::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Rotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Rotate() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Rotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rotate(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::RotateRequest* /*request*/, ::redtangle_grpc::RotateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EndTurn() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::EndTurnRequest* /*request*/, ::redtangle_grpc::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::GetStatusRequest* /*request*/, ::redtangle_grpc::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Disconnect() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::DisconnectRequest* /*request*/, ::redtangle_grpc::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Connect() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::ConnectRequest* /*request*/, ::redtangle_grpc::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Select() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::SelectRequest* /*request*/, ::redtangle_grpc::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSelect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Rotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Rotate() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Rotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rotate(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::RotateRequest* /*request*/, ::redtangle_grpc::RotateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRotate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EndTurn() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::EndTurnRequest* /*request*/, ::redtangle_grpc::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEndTurn(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::GetStatusRequest* /*request*/, ::redtangle_grpc::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Disconnect() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::DisconnectRequest* /*request*/, ::redtangle_grpc::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDisconnect(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Connect() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Connect(context, request, response); }));
    }
    ~WithRawCallbackMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::ConnectRequest* /*request*/, ::redtangle_grpc::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Connect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Select() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Select(context, request, response); }));
    }
    ~WithRawCallbackMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::SelectRequest* /*request*/, ::redtangle_grpc::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Select(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Rotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Rotate() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Rotate(context, request, response); }));
    }
    ~WithRawCallbackMethod_Rotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Rotate(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::RotateRequest* /*request*/, ::redtangle_grpc::RotateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Rotate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EndTurn() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EndTurn(context, request, response); }));
    }
    ~WithRawCallbackMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::EndTurnRequest* /*request*/, ::redtangle_grpc::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EndTurn(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStatus() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::GetStatusRequest* /*request*/, ::redtangle_grpc::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Disconnect() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Disconnect(context, request, response); }));
    }
    ~WithRawCallbackMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::DisconnectRequest* /*request*/, ::redtangle_grpc::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Disconnect(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Connect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Connect() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::redtangle_grpc::ConnectRequest, ::redtangle_grpc::ConnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::redtangle_grpc::ConnectRequest, ::redtangle_grpc::ConnectResponse>* streamer) {
                       return this->StreamedConnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Connect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Connect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::ConnectRequest* /*request*/, ::redtangle_grpc::ConnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::redtangle_grpc::ConnectRequest,::redtangle_grpc::ConnectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Select : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Select() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::redtangle_grpc::SelectRequest, ::redtangle_grpc::SelectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::redtangle_grpc::SelectRequest, ::redtangle_grpc::SelectResponse>* streamer) {
                       return this->StreamedSelect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Select() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Select(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::SelectRequest* /*request*/, ::redtangle_grpc::SelectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSelect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::redtangle_grpc::SelectRequest,::redtangle_grpc::SelectResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Rotate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Rotate() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::redtangle_grpc::RotateRequest, ::redtangle_grpc::RotateResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::redtangle_grpc::RotateRequest, ::redtangle_grpc::RotateResponse>* streamer) {
                       return this->StreamedRotate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Rotate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Rotate(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::RotateRequest* /*request*/, ::redtangle_grpc::RotateResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRotate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::redtangle_grpc::RotateRequest,::redtangle_grpc::RotateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EndTurn : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EndTurn() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::redtangle_grpc::EndTurnRequest, ::redtangle_grpc::EndTurnResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::redtangle_grpc::EndTurnRequest, ::redtangle_grpc::EndTurnResponse>* streamer) {
                       return this->StreamedEndTurn(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EndTurn() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EndTurn(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::EndTurnRequest* /*request*/, ::redtangle_grpc::EndTurnResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEndTurn(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::redtangle_grpc::EndTurnRequest,::redtangle_grpc::EndTurnResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStatus() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::redtangle_grpc::GetStatusRequest, ::redtangle_grpc::GetStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::redtangle_grpc::GetStatusRequest, ::redtangle_grpc::GetStatusResponse>* streamer) {
                       return this->StreamedGetStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStatus(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::GetStatusRequest* /*request*/, ::redtangle_grpc::GetStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::redtangle_grpc::GetStatusRequest,::redtangle_grpc::GetStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Disconnect : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Disconnect() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::redtangle_grpc::DisconnectRequest, ::redtangle_grpc::DisconnectResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::redtangle_grpc::DisconnectRequest, ::redtangle_grpc::DisconnectResponse>* streamer) {
                       return this->StreamedDisconnect(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Disconnect() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Disconnect(::grpc::ServerContext* /*context*/, const ::redtangle_grpc::DisconnectRequest* /*request*/, ::redtangle_grpc::DisconnectResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDisconnect(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::redtangle_grpc::DisconnectRequest,::redtangle_grpc::DisconnectResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_Select<WithStreamedUnaryMethod_Rotate<WithStreamedUnaryMethod_EndTurn<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_Disconnect<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Connect<WithStreamedUnaryMethod_Select<WithStreamedUnaryMethod_Rotate<WithStreamedUnaryMethod_EndTurn<WithStreamedUnaryMethod_GetStatus<WithStreamedUnaryMethod_Disconnect<Service > > > > > > StreamedService;
};

}  // namespace redtangle_grpc


#endif  // GRPC_redtangle_2eproto__INCLUDED
